import "./AttribuerMarche.scss";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-hot-toast";
import { useParams } from "react-router-dom";
import { Link } from 'react-router-dom';
import { isEmpty } from "../../../../utils/utils";
import { getOffre, updateOffre } from "../../../../actions/offreActions";
import LoadingComponent from "../../../../pages/Loading/LoadingComponent";

export default function AttribuerMarche() {
  const { offreID } = useParams();
  const dispatch = useDispatch();
  const offreData = useSelector((state) => state.offreReducer);

  const [detailsProposition, setDetailsProposition] = useState('');  
  const [noteObtenue, setNoteObtenue] = useState(0);  
  const [resultatEvaluation, setResultatEvaluation] = useState('');
  const [motif, setMotif] = useState('');  

  useEffect(() => {
    const fetchData = async () => {
      try {
        await dispatch(getOffre(offreID));
      } catch (error) {
        console.error(error);
        toast.error("Une erreur s'est produite lors de la r√©cup√©ration de le offre !", {
          duration: 6000,
          position: "top-center",
        });
      }
    };    
    fetchData();
  }, [dispatch]);

  useEffect(() => {
    if (offreData) {
      setDetailsProposition(offreData.detailsProposition || '')
      setNoteObtenue(offreData.noteObtenue || 0)
      setResultatEvaluation(offreData.resultatEvaluation || '')
      setMotif(offreData.motif || '');

      const selectElement1 = document.getElementById("resultatEvaluation");
      const selectElement2 = document.getElementById("motif");
  
      if (selectElement1 && selectElement2) {
        for (let option of selectElement1.options) {
          if (option.value === offreData.resultatEvaluation) {
            option.selected = true;
            break;
          }
        }
        for (let option of selectElement2.options) {
          if (option.value === offreData.motif) {
            option.selected = true;
            break;
          }
        }
      }
    } 
     
    
  }, [offreData]);

  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      await dispatch(updateOffre(offreID, {detailsProposition, noteObtenue, resultatEvaluation, motif }));
      toast.success("Enregistrement r√©ussi.", {
        duration: 6000,
        position: "top-center",
      });     
    } catch (error) {
      console.error(error);
      toast.error("Une erreur s'est produite lors de l'enregistrement !", {
        duration: 6000,
        position: "top-center",
      });
    }
  };

  return (
    isEmpty(offreData) ? (
      <LoadingComponent />
    ) : (
      <div className="attribuer-marche-container">
      {/* ------------------------------------------------------------ */}
        <h2>Attribuer March√©</h2>
      {/* ------------------------------------------------------------ */}
        <div className="details-propostion">
          <h4>D√©tails Proposition :</h4>
          <p>{detailsProposition}</p>
        </div>           
      {/* ------------------------------------------------------------ */}
        <div className="note-obtenue">
          <h4>{`Note Obtenue : ${noteObtenue} / 100`}</h4>
        </div>           
      {/* ------------------------------------------------------------ */}
        <form action="" onSubmit={handleRegister}>
          <div className="form-item">
            <label htmlFor="resultatEvaluation">Resultat d'√âvaluation :</label>
            <select id="resultatEvaluation" name="resultatEvaluation" onChange={(e) => setResultatEvaluation(e.target.value)} required>
              <option value="">Choisissez</option>
              <option value="Accepte">Accepte</option>
              <option value="Rejete">Rejete</option>
            </select>
          </div>
          <div className="form-item">
            <label htmlFor="motif">Motif (S√©lection / Rejet) :</label>
            <select id="motif" name="motif" onChange={(e) => setMotif(e.target.value)} required>
              <option value="">Choisissez</option>
              <option value="">----------------S√©lection------------------</option>
              <option value="Conformit√© aux exigences techniques">Conformit√© aux exigences</option>
              <option value="Prix comp√©titif">Prix comp√©titif</option>
              <option value="Exp√©rience et comp√©tences">Exp√©rience et comp√©tences</option>
              <option value="Qualit√© des produits ou services">Qualit√© des produits ou services</option>
              <option value="D√©lais de livraison">D√©lais de livraison</option>
              <option value="">-----------------Rejet---------------------</option>
              <option value="Non-conformit√© aux exigences techniques">Non-conformit√© aux exigences</option>
              <option value="Prix excessif">Prix excessif</option>
              <option value="Manque d'exp√©rience ou de comp√©tences">Manque d'exp√©rience</option>
              <option value="Qualit√© insuffisante">Qualit√© insuffisante</option>
              <option value="D√©lais de livraison non respect√©s">D√©lais de livraison non respect√©s</option>
            </select>
          </div>                
          <div className="submit-back-container">
            <Link to="#" className="back-button" onClick={() => window.history.back()}>ü°® Tous les offres</Link>
            <input type="submit" className="submit-button" value="Enregistrer" />    
          </div>  
        </form>
      </div>
    )
  );
}
